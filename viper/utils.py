import binascii
try:
    from Crypto.Hash import keccak
    sha3 = lambda x: keccak.new(digest_bits=256, data=x).digest()
except ImportError:
    import sha3 as _sha3
    sha3 = lambda x: _sha3.sha3_256(x).digest()

# Converts for bytes to an integer
def fourbytes_to_int(inp):
    return (inp[0] << 24) + (inp[1] << 16) + (inp[2] << 8) + inp[3]

# Converts a provided hex string to an integer
def hex_to_int(inp):
    if inp[:2] == '0x':
        inp = inp[2:]
    return bytes_to_int(binascii.unhexlify(inp))

# Converts bytes to an integer
def bytes_to_int(bytez):
    o = 0
    for b in bytez:
        o = o * 256 + b
    return o

# Encodes an address using ethereum's checksum scheme
def checksum_encode(addr): # Expects an input of the form 0x<40 hex chars>
    assert addr[:2] == '0x' and len(addr) == 42
    o = ''
    v = bytes_to_int(sha3(addr[2:].lower().encode('utf-8')))
    for i, c in enumerate(addr[2:]):
        if c in '0123456789':
            o += c
        else:
            o += c.upper() if (v & (2**(255 - 4*i))) else c.lower()
    return '0x'+o


# A decimal value can store multiples of 1/DECIMAL_DIVISOR
DECIMAL_DIVISOR = 10000000000

# Number of bytes in memory used for system purposes, not for variables
RESERVED_MEMORY = 320
ADDRSIZE_POS = 32
MAXNUM_POS = 64
MINNUM_POS = 96
MAXDECIMAL_POS = 128
MINDECIMAL_POS = 160
FREE_VAR_SPACE = 192
BLANK_SPACE = 224
FREE_LOOP_INDEX = 256

RLP_DECODER_ADDRESS = hex_to_int('0x0B8178879f97F2aDa01fb8D219ee3d0AD74E91E0'[2:])

# Instructions for creating RLP decoder on other chains
# First, Send 8901000000000000 wei to 0xb3534874f1a38dd7d1998097Cd0b5342E6A83a88
# Then, publish this TX to create the contract: 0xf90386808506fc23ac00830486fc8080b903736103618061000e60003961036f5660006101bf53610420599059016000905260208152602081019050602052600060605261042059905901600090526104008152602081019050608052600060c0527f01000000000000000000000000000000000000000000000000000000000000006000350460e05260c060e051121561007557fe5b60f860e051121561009e5760c060e051036001013614151561009357fe5b6001610100526100de565b60f760e051036020036101000a600161010051013504610120526101205160f760e0510360010101361415156100d057fe5b60f760e05103600101610100525b5b366101005112156102b5577f010000000000000000000000000000000000000000000000000000000000000061010051350460e05260c0516060516020026020510152600160605101606052608060e051121561015d5760016101005160c05160805101376001610100510161010052600160c0510160c05261028d565b60b860e05112156101e157608060e051036001610100510160c0516080510137608160e05114156101bd5760807f010000000000000000000000000000000000000000000000000000000000000060016101005101350412156101bc57fe5b5b6001608060e0510301610100510161010052608060e0510360c0510160c05261028c565b60c060e05112156102895760b760e051036020036101000a6001610100510135046101205260007f0100000000000000000000000000000000000000000000000000000000000000600161010051013504141561023a57fe5b603861012051121561024857fe5b6101205160b760e05160016101005101010360c051608051013761012051600160b760e0510301016101005101610100526101205160c0510160c05261028b565bfe5b5b5b61040060c0511380156102a057806102a7565b6020606051135b9050156102b057fe5b6100df565b60c051606051602002602051015261082059905901600090526108008152602081019050610160526000610100525b6060516101005113151561032557602060206060510261010051602002602051015101016101005160200261016051015260016101005101610100526102e4565b60c0518060206020606051026101605101018260805160006004600a8705601201f161034d57fe5b50602060c051602060605102010161016051f35b6000f31b2d4f
